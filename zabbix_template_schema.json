{
    "$defs": {
        "uuid_field": {
            "description": "Unique field reference",
            "type": "string",
            "format": "uuid",
            "pattern": "[A-Za-z0-9]{32}"
        },
        "tags_def": {
            "description": "Root element for item tags.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "tag": {
                        "description": "Tag name.",
                        "type": "string"
                    },
                    "value": {
                        "description": "Tag value.",
                        "type": "string"
                    }
                },
                "required": ["tag"],
                "additionalProperties": false
            }
        },
        "snmp_type_conditional": {
            "if": {
                "anyOf": [
                    { "properties": { "type": {"const": "SNMP_AGENT" } } },
                    { "properties": { "type": {"const": "SNMP_TRAP" } } }
                ]
            },
            "then": {
                "properties": { 
                    "snmp_oid": { 
                        "description": "SNMP object ID.",
                        "type": "string"
                        }
                    },
                "required": [ "snmp_oid" ]
            },
            "else": {
                "not": { "required": [ "snmp_oid" ] }
            }
        },
        "trap_type_conditional": {
            "if": { "properties": { "type": {"const": "TRAP" } } },
            "then": {
                "properties": { 
                    "allowed_hosts": { 
                        "description": "List of IP addresses (comma delimited) of hosts allowed sending data for the item.\n\nUsed by trapper and HTTP agent items.",
                        "type": "string"
                    }
                }
            },
            "else": {
                "not": { "required": [ "allowed_hosts" ] }
            }

        },
        "allowed_hosts_conditional": {
            "if": {
                "anyOf": [
                    { "properties": { "type": {"const": "TRAP" } } },
                    { "properties": { "type": {"const": "HTTP_AGENT" } } }
                ]
            },
            "then": {
                "properties": { 
                    "allowed_hosts": { 
                        "description": "List of IP addresses (comma delimited) of hosts allowed sending data for the item.\n\nUsed by trapper and HTTP agent items.",
                        "type": "string"
                    }
                }
            },
            "else": {
                "not": { "required": [ "allowed_hosts" ] }
            }
        },
        "authtype_conditional": {
            "$comment": "First check if the type is SSH or HTTP_AGENT",
            "if": {
                "anyOf": [
                    { "properties": { "type": { "const": "SSH"} } },
                    { "properties": { "type": { "const": "HTTP_AGENT"} } }
                ]
            },
            "then": {
                "if": { "properties": { "type": { "const": "SSH"} } },
                "then": {
                    "$comment": "We have an SSH type, let's set the property accordingly",
                    "properties": { 
                        "authtype": { 
                            "description": "Authentication type.\n\nUsed only by SSH and HTTP agent items.",
                            "enum": [
                                "PASSWORD",
                                "PUBLIC_KEY"
                            ],
                            "default": "PASSWORD",
                            "type": "string"
                        }
                    }
                },
                "else": {
                    "$comment": "We have an HTTP_AGENT type, let's set the property accordingly",
                    "properties": { 
                        "authtype": { 
                            "description": "Authentication type.\n\nUsed only by SSH and HTTP agent items.",
                            "enum": [
                                "NONE",
                                "BASIC",
                                "NTLM"
                            ],
                            "default": "NONE",
                            "type": "string"
                        }
                    }
                }
            },
            "else": {
                "not": { "required": [ "authtype" ] }
            }
        },
        "ipmi_type_conditional": {
            "if": { 
                "properties": { "type": {"const": "IPMI" } } 
            },
            "then": {
                "properties": { 
                    "ipmi_sensor": { 
                        "description": "IPMI sensor.\n\nUsed only by IPMI items.",
                        "type": "string"
                    }
                }
            },
            "else": {
                "not": { "required": [ "ipmi_sensor" ] }
            }
        },
        "item": {
            "type": "object",
            "required": ["uuid", "key", "name"],
            "unevaluatedProperties": false,            
            "properties": {
                "uuid": {
                    "$ref": "#/$defs/uuid_field"
                },
                "name": {
                    "description": "Name of item",
                    "type": "string"
                },
                "key": {
                    "description": "Unique key identifier",
                    "type": "string"
                },
                "type": {
                    "description": "Item type to use",
                    "default": "ZABBIX_PASSIVE",
                    "enum": [
                        "ZABBIX_PASSIVE",
                        "TRAP",
                        "SIMPLE",
                        "INTERNAL",
                        "ZABBIX_ACTIVE",
                        "EXTERNAL",
                        "ODBC",
                        "IPMI",
                        "SSH",
                        "TELNET",
                        "CALCULATED",
                        "JMX",
                        "SNMP_TRAP",
                        "DEPENDENT",
                        "HTTP_AGENT",
                        "SNMP_AGENT",
                        "ITEM_TYPE_SCRIPT"
                    ],
                    "type": ["string"]
                },
                "status": {
                    "enum": [
                        "ENABLED",
                        "DISABLED"
                    ],
                    "type": "string"
                },
                "value_type": {
                    "description": "Received value type.",
                    "default": "UNSIGNED",
                    "enum": [
                        "FLOAT",
                        "CHAR",
                        "LOG",
                        "UNSIGNED",
                        "TEXT"
                    ],
                    "type": "string"
                },
                "delay":{
                    "type": "string",
                    "description": "Update interval of the item.\n\nAccepts seconds or a time unit with suffix (30s, 1m, 2h, 1d).\nOptionally one or more custom intervals can be specified either as flexible intervals or scheduling.\nMultiple intervals are separated by a semicolon.\nUser macros may be used. A single macro has to fill the whole field. Multiple macros in a field or macros mixed with text are not supported.\nFlexible intervals may be written as two macros separated by a forward slash (e.g. {$FLEX_INTERVAL}/{$FLEX_PERIOD})."
                },
                "history": {
                    "type": "string",
                    "description": "A time unit of how long the history data should be stored. Time unit with suffix, user macro or LLD macro."
                },
                "trends": {
                    "type": "string",
                    "description": "A time unit of how long the trends data should be stored. Time unit with suffix, user macro or LLD macro."
                },
                "units": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Item description"
                },
                "tags": {
                    "$ref": "#/$defs/tags_def"
                }
            },
            "allOf": [ 
                { "$ref": "#/$defs/snmp_type_conditional" },
                { "$ref": "#/$defs/allowed_hosts_conditional" },
                { "$ref": "#/$defs/authtype_conditional"},
                { "$ref": "#/$defs/ipmi_type_conditional" }
            ]
        }
    },
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "Zabbix Template",
    "description": "Template for producing Zabbix Templates",
    "type": "object",
    "properties": {
        "zabbix_export":{
            "description": "Root object for template",
            "type": "object",
            "properties": {
                "version": {
                    "description": "Minimum Zabbix version this is compatable with",
                    "type": "string"
                },
                "date": {
                    "description": "Cate/Modification date for template",
                    "type": "string"
                },
                "groups": {
                    "description": "Groups This template is associated with",
                    "type": "array",
                    "items":{
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "$ref": "#/$defs/uuid_field"
                            },
                            "name": {
                                "description": "Group Name",
                                "type": "string"
                            }
                        },
                        "required": [ "uuid" ]
                    }
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "$ref": "#/$defs/uuid_field"
                            },
                            "template": {
                                "description": "Template ID",
                                "type": "string"
                            },
                            "name": {
                                "description": "Template Name",
                                "type": "string"
                            },
                            "groups": {
                                "description": "Groups to create which this template will be a member of",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "description": "Group Name",
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/$defs/item"
                                }
                            }
                        },
                        "required": ["uuid"]
                    }
                }
            },
            "required": ["version","date","templates"]
        }
    }
}